require 'digest/sha1'
require 'tmpdir'

# ensure the Kernel.system and Kernel.open's always use the correct tt and
# Treetop library versions, not a previously installed gem
ENV['PATH'] = File.expand_path(File.dirname(__FILE__) + '../../../bin' +
                              File::PATH_SEPARATOR + ENV['PATH'])
$LOAD_PATH.unshift(File.expand_path('../../../../lib', __FILE__))

describe "The 'tt' comand line compiler" do
  before(:each) do
    @tmpdir = Dir.tmpdir
  end

  context 'when processing a single grammar file' do
    before(:each) do
      # create a fresh but dumb grammar file for each example
      @test_base = "dumb-#{rand(1000)}"
      @test_path = "#{@tmpdir}/#{@test_base}"
      @test_grammar = "#{@test_path}.tt"
      @test_ruby = "#{@test_path}.rb"
      File.open(@test_grammar, 'w+') do |f|
        f.print("# Encoding: UTF-8\n")
        f.print("grammar Dumb\n")
        f.print("end\n")
      end unless File.exists?(@test_grammar)
    end

    after(:each) do
      # cleanup test grammar and parser output files
      File.delete(@test_grammar) if File.exists?(@test_grammar)
      File.delete(@test_ruby) if File.exists?(@test_ruby)
    end

    it 'can compile a grammar file' 


    it 'can compile a relative pathed grammar file' 


    it 'can compile an absolute pathed grammar file' 


    it 'can compile without explicit file extensions' 


    it 'skips nonexistent grammar file without failing or creating bogus output' 


    it 'can compile to a specified parser source file' 


    it 'by default, does not overwrite an existing file without an autogenerated header' 


    it 'by default, overwrites a changed file with an intact autogenerated header' 


    it 'can be forced to overwrite existing file #{@test_path}' 


  end

  context 'when processing multiple grammar files' do

    before(:each) do
      # provide fresh but dumb grammar files for each test
      @test_bases = []
      @test_grammars = []

      %w[dumb1 dumb2].each do |e|
        base = "#{@tmpdir}/#{e}-#{rand(1000)}"
        grammar_file = "#{base}.tt"
        @test_bases << base
        @test_grammars << grammar_file

        File.open(grammar_file, 'w+') do |f|
          f.print("grammar #{e.capitalize}\n")
          f.print("end\n")
        end unless File.exists?(grammar_file)
      end
    end

    after(:each) do
      # cleanup test grammar and output parser files
      @test_grammars.each { |f| File.delete(f) if File.exists?(f) }
      @test_bases.each { |f| File.delete("#{f}.rb") if File.exists?("#{f}.rb") }
    end
 
    it 'can compile them in one invocation' 


    it 'can compile them without explicit file extenstions' 


    it 'can skip nonexistent and invalid extension named grammar files' 


    it 'can not specify an output file' 

  end

end

