module RSpec
  module Core
    RSpec.describe Metadata do

      describe '.relative_path' do
        let(:here) { File.expand_path(".") }
        it "transforms absolute paths to relative paths" 

        it "transforms absolute paths to relative paths anywhere in its argument" 

        it "returns nil if passed an unparseable file:line combo" 

        # I have no idea what line = line.sub(/\A([^:]+:\d+)$/, '\\1') is supposed to do
        it "gracefully returns nil if run in a secure thread" 


        it 'should not transform directories beginning with the same prefix' 


      end

      specify 'RESERVED_KEYS contains all keys assigned by RSpec (and vice versa)' do
        group        = RSpec.describe("group")
        example      = group.example("example") { }
        nested_group = group.describe("nested")

        assigned_keys = group.metadata.keys | example.metadata.keys | nested_group.metadata.keys
        expect(RSpec::Core::Metadata::RESERVED_KEYS).to match_array(assigned_keys)
      end

      context "when created" do
        Metadata::RESERVED_KEYS.each do |key|
          it "prohibits :#{key} as a hash key for an example group" 


          it "prohibits :#{key} as a hash key for an example" 

        end

        it "uses :caller if passed as part of the user metadata" 

      end

      context "for an example" do
        let(:line_number) { __LINE__ + 3 }
        def metadata_for(*args)
          RSpec.describe("group description") do
            return example(*args).metadata
          end
        end
        alias example_metadata metadata_for

        RSpec::Matchers.define :have_value do |value|
          chain(:for) { |key| @key = key }

          match do |meta|
            expect(meta.fetch(@key)).to eq(value)
            expect(meta[@key]).to eq(value)
          end
        end

        it "stores the description args" 


        it "ignores nil description args" 


        it "stores the full_description (group description + example description)" 


        it "creates an empty execution result" 


        it "extracts file path from caller" 


        it "extracts line number from caller" 


        it "extracts location from caller" 


        it "uses :caller if passed as an option" 


        it "merges arbitrary options" 


        it "points :example_group to the same hash object as other examples in the same group" 


        it 'does not include example-group specific keys' 

      end

      context "for an example group" do
        it 'does not include example specific keys' 

      end

      describe ":block" do
        context "for example group metadata" do
          it "contains the example group block" 

        end

        context "for example metadata" do
          it "contains the example block" 

        end
      end

      describe ":last_run_status" do
        it 'assigns it by looking up configuration.last_run_statuses[id]' 

      end

      describe ":id" do
        define :have_id_with do |scoped_id|
          expected_id = "#{Metadata.relative_path(__FILE__)}[#{scoped_id}]"

          match do |group_or_example|
            group_or_example.metadata[:scoped_id] == scoped_id &&
            group_or_example.id == expected_id
          end

          failure_message do |group_or_example|
            "expected #{group_or_example.inspect}\n" \
            "   to have id: #{expected_id}\n" \
            "   but had id: #{group_or_example.id}\n" \
            "   and have scoped id: #{scoped_id}\n" \
            "   but had  scoped id: #{group_or_example.metadata[:scoped_id]}"
          end
        end

        context "on a top-level group" do
          it "is set to file[<group index>]" 


          it "starts the count at 1 for each file" 

        end

        context "on a nested group" do
          it "is set to file[<group index>:<group index>]" 

        end

        context "on an example" do
          it "is set to file[<group index>:<example index>]" 

        end

        context "when examples are interleaved with example groups" do
          it "counts both when assigning the index" 

        end

        context "on an example defined in a shared group defined in a separate file" do
          it "uses the host group's file name as the prefix" 

        end
      end

      describe ":shared_group_inclusion_backtrace" do
        context "for an example group" do
          it "is not set since we do not yet need it internally (but we can add it in the future if needed)" 

        end

        context "for an example" do
          context "not generated by a shared group" do
            it "is a blank array" 

          end

          context "generated by an unnested shared group included via metadata" do
            it "is an array containing an object with shared group name and inclusion location" 

          end

          {
            :it_behaves_like  => "generates a nested group",
            :include_examples => "adds the examples directly to the host group"
          }.each do |inclusion_method, description|
            context "generated by an unnested shared group using an inclusion method that #{description}" do
              it "is an array containing an object with shared group name and inclusion location" 

            end

            context "generated by a nested shared group using an inclusion method that #{description}" do
              it "contains a stack frame for each inclusion, in the same order as ruby backtraces" 

            end
          end
        end
      end

      describe ":described_class" do
        value_from = lambda do |group|
          group.metadata[:described_class]
        end

        context "in an outer group" do
          define_method :value_for do |arg|
            value_from[RSpec.describe(arg)]
          end

          context "with a String" do
            it "returns nil" 

          end

          context "with a Symbol" do
            it "returns the symbol" 

          end

          context "with a class" do
            it "returns the class" 


            context "when the class is Regexp" do
              it "returns the class" 

            end
          end
        end

        context "in a nested group" do
          it "inherits the parent group's described class" 


          it "sets the described class when passing a class" 


          it 'does not override the :described_class when passing no describe args' 


          it "can override a parent group's described class using metadata" 

        end
      end

      describe ":description" do
        context "on a example" do
          it "just has the example description" 

        end

        context "on a group" do
          def group_value_for(*args)
            value = nil

            RSpec.describe(*args) do
              value = metadata[:description]
            end

            value
          end

          context "with a string" do
            it "provides the submitted description" 

          end

          context "with a non-string" do
            it "provides the string form of the submitted object" 

          end

          context "with a non-string and a string" do
            it "concats the args" 

          end

          context "with a string and a non-string" do
            it "concats the args" 

          end

          context "with empty args" do
            it "returns empty string for [:description]" 

          end
        end
      end

      describe ":full_description" do
        context "on an example" do
          it "concats example group name and description" 

        end

        it "omits description from groups with a `nil` description" 


        it "omits description from groups with a description of `''`" 


        it "concats nested example group descriptions" 


        it "concats nested example group descriptions three deep" 


        %w[# . ::].each do |char|
          context "with a 2nd arg starting with #{char}" do
            it "removes the space" 

          end

          context "with a description starting with #{char} nested under a module" do
            it "removes the space" 

          end

          context "with a description starting with #{char} nested under a context string" do
            it "does not remove the space" 

          end
        end
      end

      describe ":file_path" do
        it "finds the first non-rspec lib file in the caller array" 

      end

      describe ":line_number" do
        def value_for(*args)
          value = nil

          @describe_line = __LINE__ + 1
          RSpec.describe("group", *args) do
            value = metadata[:line_number]
          end

          value
        end

        it "finds the line number with the first non-rspec lib file in the backtrace" 


        it "finds the line number with the first spec file with drive letter" 


        it "uses the number after the first : for ruby 1.9" 

      end

      describe "child example group" do
        it "nests the parent's example group metadata" 

      end

      it 'does not have a `:parent_example_group` key for a top level group' 


      describe "backwards compatibility" do
        before { allow_deprecation }

        describe ":example_group" do
          it 'issues a deprecation warning when the `:example_group` key is accessed' 


          it 'does not issue a deprecation warning when :example_group is accessed while applying configured filterings' 


          it 'can still access the example group attributes via [:example_group]' 


          it 'can access the parent example group attributes via [:example_group][:example_group]' 


          it "works properly with deep nesting" 


          it "works properly with shallow nesting" 


          it 'allows integration libraries like VCR to infer a fixture name from the example description by walking up nesting structure' 


          it 'can mutate attributes when accessing them via [:example_group]' 


          it 'can still be filtered via a nested key under [:example_group] as before' 

        end

        describe ":example_group_block" do
          it 'returns the block' 


          it 'issues a deprecation warning' 

        end

        describe ":describes" do
          context "on an example group metadata hash" do
            it 'returns the described_class' 


            it 'issues a deprecation warning' 

          end

          context "an an example metadata hash" do
            it 'returns the described_class' 


            it 'issues a deprecation warning' 

          end
        end
      end
    end
  end
end

