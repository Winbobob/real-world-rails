require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SleepsController do

  # This should return the minimal set of attributes required to create a valid
  # Sleep. As you add validations to Sleep, be sure to
  # adjust the attributes here as well.
  let(:user)       {Fabricate(:user)}

  let(:valid_attributes) { { "start" => "2014-01-08 23:15:57", "end" => "2014-01-09 23:15:57" } }

  describe "GET index" do
    context "when a user isn't signed in" do
      it "redirects" 

    end

    context "when a user is signed in" do
      before(:each) do
        sign_in user
      end

      it "assigns all sleeps as @sleeps" 

    end
  end

  describe "GET 'show'" do
    context "when a user isn't signed in" do
      it "redirects" 

    end

    context "when a user is is signed in" do
      before(:each) do
        sign_in user
      end

      it "assigns the requested sleep as @sleep" 


      it "prevents access to another user's sleep" 

    end
  end

  describe "GET new" do
    context "when a user isn't signed in" do
      it "redirects" 

    end

    context "when a user is signed in" do
      before(:each) do
        sign_in user
      end

      it "assigns a new sleep as @sleep" 

    end
  end

  describe "GET edit" do
    context "when a user isn't signed in" do
      it "should redirect" 

    end

    context "when a user is is signed in" do
      before(:each) do
        sign_in user
      end

      it "assigns the requested sleep as @sleep" 


      it "prevents access to another user's sleep" 

    end
  end

  describe "POST create" do
    context "when a user isn't signed in" do
      it "should redirect" 

    end

    context "when a user is is signed in" do
      before(:each) do
        sign_in user
      end

      describe "with valid params" do
        it "creates a new Sleep" 


        it "assigns a newly created sleep as @sleep" 


        it "redirects to the sleep index" 

      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved sleep as @sleep" 


        it "re-renders the 'new' template" 

      end
    end
  end

  describe "PUT update" do
    context "when a user isn't signed in" do
      it "should redirect" 

    end

    context "when a user is is signed in" do
      before(:each) do
        sign_in user
      end

      describe "with valid params" do
        it "updates the requested sleep" 


        it "assigns the requested sleep as @sleep" 


        it "redirects to the sleep index" 

      end

      describe "with invalid params" do
        it "assigns the sleep as @sleep" 


        it "re-renders the 'edit' template" 

      end
    end
  end

  describe "DELETE destroy" do
    context "when a user isn't signed in" do
      it "should redirect" 

    end

    context "when a user is is signed in" do
      before(:each) do
        sign_in user
      end

      it "destroys the requested sleep" 


      it "redirects to the sleeps list" 

    end
  end
end

