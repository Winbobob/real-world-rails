require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SqsIntegrationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # SqsIntegration. As you add validations to SqsIntegration, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      queue_url: "https://sqs.us-east-1.amazonaws.com/1234567890/fake-klaxon-sqs"
    }
  }

  let(:invalid_attributes) {
    {
      queue_url: "http://sqs.us-east-1.amazonaws.com/1234567890/fake-klaxon-sqs" # note not HTTPS
    }
  }

  describe "GET #index" do
    it "assigns all sqs_integrations as @sqs_integrations" 

  end

  describe "GET #show" do
    it "assigns the requested sqs_integration as @sqs_integration" 

  end

  describe "GET #new" do
    it "assigns a new sqs_integration as @sqs_integration" 

  end

  describe "GET #edit" do
    it "assigns the requested sqs_integration as @sqs_integration" 

  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new SqsIntegration" 


      it "assigns a newly created sqs_integration as @sqs_integration" 


      it "redirects to the intersections path" 

    end

    context "with invalid params" do
      it "assigns a newly created but unsaved sqs_integration as @sqs_integration" 


      it "re-renders the 'new' template" 

    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          queue_url: "https://sqs.us-east-1.amazonaws.com/1234567890/new-fake-klaxon-sqs"
        }
      }

      it "updates the requested sqs_integration" 


      it "assigns the requested sqs_integration as @sqs_integration" 


      it "redirects to the sqs_integration" 

    end

    context "with invalid params" do
      it "assigns the sqs_integration as @sqs_integration" 


      it "re-renders the 'edit' template" 

    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested sqs_integration" 


    it "redirects to the sqs_integrations list" 

  end
end

